{"ast":null,"code":"var _jsxFileName = \"/Users/r2b/Desktop/DEV/Mosh_react/app2/app2/src/components/counter.js\";\nimport React, { Component } from \"react\";\n\nclass Counter extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      value: this.props.value\n    };\n\n    this.handleIncrement = () => {\n      this.setState({\n        value: this.state.value + 1\n      });\n    };\n  }\n\n  render() {\n    console.log(\"this.props\");\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 7\n      }\n    }, this.props.children, /*#__PURE__*/React.createElement(\"span\", {\n      className: this.getBadgeClasses(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }\n    }, this.formatCount()), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: product => this.handleIncrement(product),\n      className: \"btn btn-secondary btn-\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }\n    }, \"+\")) //jsx expression must have one parent element in this case div\n    ;\n  }\n\n  getBadgeClasses() {\n    let classes = \"badge m-2 badge-\"; // what always there\n\n    classes += this.state.value === 0 ? \"warning\" : \"primary\"; // if count 0 then badge-warning applies otherwise badge-primary applies.\n\n    return classes;\n  }\n\n  formatCount() {\n    const {\n      value\n    } = this.state;\n    return value === 0 ? \"Zero\" : value; // count equals to zero then x applies otherwise count applies.\n  }\n\n}\n\nexport default Counter;","map":{"version":3,"sources":["/Users/r2b/Desktop/DEV/Mosh_react/app2/app2/src/components/counter.js"],"names":["React","Component","Counter","state","value","props","handleIncrement","setState","render","console","log","children","getBadgeClasses","formatCount","product","classes"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,MAAMC,OAAN,SAAsBD,SAAtB,CAAgC;AAAA;AAAA;AAAA,SAC9BE,KAD8B,GACtB;AACNC,MAAAA,KAAK,EAAE,KAAKC,KAAL,CAAWD;AADZ,KADsB;;AAAA,SAK9BE,eAL8B,GAKZ,MAAM;AACtB,WAAKC,QAAL,CAAc;AAAEH,QAAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,KAAX,GAAmB;AAA5B,OAAd;AACD,KAP6B;AAAA;;AAS9BI,EAAAA,MAAM,GAAG;AACPC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,wBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKL,KAAL,CAAWM,QADd,eAEE;AAAM,MAAA,SAAS,EAAE,KAAKC,eAAL,EAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA0C,KAAKC,WAAL,EAA1C,CAFF,eAGE;AACE,MAAA,OAAO,EAAGC,OAAD,IAAa,KAAKR,eAAL,CAAqBQ,OAArB,CADxB;AAEE,MAAA,SAAS,EAAC,wBAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAHF,CADF,CAUoB;AAVpB;AAYD;;AAEDF,EAAAA,eAAe,GAAG;AAChB,QAAIG,OAAO,GAAG,kBAAd,CADgB,CACkB;;AAClCA,IAAAA,OAAO,IAAI,KAAKZ,KAAL,CAAWC,KAAX,KAAqB,CAArB,GAAyB,SAAzB,GAAqC,SAAhD,CAFgB,CAE2C;;AAC3D,WAAOW,OAAP;AACD;;AAEDF,EAAAA,WAAW,GAAG;AACZ,UAAM;AAAET,MAAAA;AAAF,QAAY,KAAKD,KAAvB;AACA,WAAOC,KAAK,KAAK,CAAV,GAAc,MAAd,GAAuBA,KAA9B,CAFY,CAEyB;AACtC;;AAlC6B;;AAqChC,eAAeF,OAAf","sourcesContent":["import React, { Component } from \"react\";\n\nclass Counter extends Component {\n  state = {\n    value: this.props.value,\n  };\n\n  handleIncrement = () => {\n    this.setState({ value: this.state.value + 1 });\n  };\n\n  render() {\n    console.log(\"this.props\");\n    return (\n      <React.Fragment>\n        {this.props.children}\n        <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\n        <button\n          onClick={(product) => this.handleIncrement(product)}\n          className=\"btn btn-secondary btn-\"\n        >\n          +\n        </button>\n      </React.Fragment> //jsx expression must have one parent element in this case div\n    );\n  }\n\n  getBadgeClasses() {\n    let classes = \"badge m-2 badge-\"; // what always there\n    classes += this.state.value === 0 ? \"warning\" : \"primary\"; // if count 0 then badge-warning applies otherwise badge-primary applies.\n    return classes;\n  }\n\n  formatCount() {\n    const { value } = this.state;\n    return value === 0 ? \"Zero\" : value; // count equals to zero then x applies otherwise count applies.\n  }\n}\n\nexport default Counter;\n"]},"metadata":{},"sourceType":"module"}